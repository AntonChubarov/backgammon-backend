package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcb\x6e\xc2\x30\x10\x45\xf7\x91\xf2\x0f\xb3\x0b\x48\x59\xc4\x8f\x3c\xac\x7e\x0c\x1a\x7b\xc6\xad\x45\x70\xa8\xe3\xd0\xf2\xf7\x55\x08\xa5\x45\x78\x61\xc9\x73\xaf\xce\xf1\xb8\xc4\x98\x19\x32\xda\x91\x61\x99\x39\xcd\x65\xb1\x2b\x0b\x00\xb8\xbd\x02\xc1\x7a\xe3\x58\xff\xcd\xc6\xe9\x3d\x44\xb8\x60\x72\x1f\x98\x20\x4e\x19\xe2\x32\xfe\x2f\x9c\x71\x9e\xbf\xa6\x44\x2f\x9d\xb2\xd8\xbf\x95\x45\x59\xdc\xa5\x4b\x0c\x9f\x0b\x43\x88\xc4\xdf\x9b\xfb\xf0\xe0\x1f\x96\xdb\x78\x83\x4e\x71\x8b\x61\xf7\xc8\x37\x10\x8e\x99\xd3\xf3\xe7\xd7\x3e\x12\x81\x9b\xe2\x9c\x13\x86\x98\xef\xe8\xf3\x71\x0b\xd7\x73\x4e\xe1\x84\xe9\x0a\x47\xbe\x6e\xcc\x40\x1b\x30\xc4\x99\x53\x86\x10\xf3\xf4\xa2\xac\x9f\x96\xdb\xc3\x05\xc7\x85\xef\xc6\x5d\x85\x74\x0a\x51\x54\x35\x54\x2c\xbd\x50\xde\xb6\xd6\xe9\x5e\x4b\x4d\x9d\x95\xbd\x55\xe8\x84\xeb\x9a\x96\x94\xf2\xc2\xb7\x66\x70\x82\xac\xec\x8c\x6d\xb4\x76\xca\xb7\x46\xa9\x81\x04\xb7\x83\xf2\xd5\xbe\xfe\xe5\xc9\x95\x87\x5e\x91\x50\x42\x99\x0e\x95\xd3\xbd\xf1\x86\x94\x70\xd2\x1a\xf6\xad\xf7\xc6\x6a\xa7\x49\x78\x29\x65\x33\xf4\x6c\xa5\x6e\xb4\x51\x42\xe8\x46\xba\xa1\xed\xfa\x46\x56\xeb\x6a\x3f\x01\x00\x00\xff\xff\xf4\x9a\x41\x6f\xe8\x01\x00\x00")

func _000001_init_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_up_sql,
		"000001_init.up.sql",
	)
}

var __000002_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\xaa\xc3\x40\x0c\x44\x7b\x83\xef\x30\xe5\xff\x90\x1b\xb8\x4d\x93\x03\xb8\x5e\x94\x48\x0e\xc2\xeb\xdd\x45\xab\x85\xf8\xf6\x21\x76\x11\x07\x12\x75\x62\x66\xde\xa3\xe8\x62\x70\xba\x46\x41\xab\x62\xb5\xef\x00\x80\x2d\x17\xdc\x72\xaa\x6e\xa4\xc9\xa1\x13\xe4\xa1\xd5\xeb\x5e\x0a\x65\x3e\x1d\x8a\x9f\xa9\xf2\xd0\x77\x7d\xf7\x83\x4c\xcc\xdb\x3b\x8e\x97\x33\x5a\x53\x46\xca\x8e\xd4\x62\xdc\xf3\xd7\x1d\xc4\x3c\x85\xdd\xa8\x0c\x96\x89\x5a\x74\xdc\x25\x05\xa3\xc4\x79\x09\x1b\xe0\xef\xff\xeb\xb4\xcc\xef\x69\x31\x5d\xc8\x56\xcc\xb2\x0e\xcf\x00\x00\x00\xff\xff\xf1\x42\x7f\x60\xf3\x00\x00\x00")

func _000002_init_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_init_up_sql,
		"000002_init.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _generate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xb1\x0d\xc5\x20\x0c\x04\xd0\x9e\x29\x6e\x01\xa0\xff\xdb\xdc\x4f\xac\x13\x42\xb1\x11\xf1\xfe\x4a\x93\x22\xf5\x7b\x8b\xc7\xa4\x0c\xd7\xd0\x66\x8e\xf0\xbb\x94\xde\x15\x3f\x99\xdb\x66\x1a\x14\xf5\x3f\xfc\x64\x12\x75\x4d\x7d\x26\x6a\xe0\xa5\xa6\x00\x5a\x79\x02\x00\x00\xff\xff\xe6\x24\xd8\x86\x4e\x00\x00\x00")

func generate_go() ([]byte, error) {
	return bindata_read(
		_generate_go,
		"generate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init.up.sql": _000001_init_up_sql,
	"000002_init.up.sql": _000002_init_up_sql,
	"bindata.go": bindata_go,
	"generate.go": generate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init.up.sql": &_bintree_t{_000001_init_up_sql, map[string]*_bintree_t{
	}},
	"000002_init.up.sql": &_bintree_t{_000002_init_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"generate.go": &_bintree_t{generate_go, map[string]*_bintree_t{
	}},
}}
