// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 000001_init.up.sql
// 000002_init.up.sql
// 000003_init.up.sql
// bindata.go
// generate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcb\x6e\xc2\x30\x10\x45\xf7\x91\xf2\x0f\xb3\x0b\x48\x59\xc4\x8f\x3c\xac\x7e\x0c\x1a\x7b\xc6\xad\x45\x70\xa8\xe3\xd0\xf2\xf7\x55\x08\xa5\x45\x78\x61\xc9\x73\xaf\xce\xf1\xb8\xc4\x98\x19\x32\xda\x91\x61\x99\x39\xcd\x65\xb1\x2b\x0b\x00\xb8\xbd\x02\xc1\x7a\xe3\x58\xff\xcd\xc6\xe9\x3d\x44\xb8\x60\x72\x1f\x98\x20\x4e\x19\xe2\x32\xfe\x2f\x9c\x71\x9e\xbf\xa6\x44\x2f\x9d\xb2\xd8\xbf\x95\x45\x59\xdc\xa5\x4b\x0c\x9f\x0b\x43\x88\xc4\xdf\x9b\xfb\xf0\xe0\x1f\x96\xdb\x78\x83\x4e\x71\x8b\x61\xf7\xc8\x37\x10\x8e\x99\xd3\xf3\xe7\xd7\x3e\x12\x81\x9b\xe2\x9c\x13\x86\x98\xef\xe8\xf3\x71\x0b\xd7\x73\x4e\xe1\x84\xe9\x0a\x47\xbe\x6e\xcc\x40\x1b\x30\xc4\x99\x53\x86\x10\xf3\xf4\xa2\xac\x9f\x96\xdb\xc3\x05\xc7\x85\xef\xc6\x5d\x85\x74\x0a\x51\x54\x35\x54\x2c\xbd\x50\xde\xb6\xd6\xe9\x5e\x4b\x4d\x9d\x95\xbd\x55\xe8\x84\xeb\x9a\x96\x94\xf2\xc2\xb7\x66\x70\x82\xac\xec\x8c\x6d\xb4\x76\xca\xb7\x46\xa9\x81\x04\xb7\x83\xf2\xd5\xbe\xfe\xe5\xc9\x95\x87\x5e\x91\x50\x42\x99\x0e\x95\xd3\xbd\xf1\x86\x94\x70\xd2\x1a\xf6\xad\xf7\xc6\x6a\xa7\x49\x78\x29\x65\x33\xf4\x6c\xa5\x6e\xb4\x51\x42\xe8\x46\xba\xa1\xed\xfa\x46\x56\xeb\x6a\x3f\x01\x00\x00\xff\xff\xf4\x9a\x41\x6f\xe8\x01\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 488, mode: os.FileMode(438), modTime: time.Unix(1629201723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\xaa\xc3\x40\x0c\x44\x7b\x83\xef\x30\xe5\xff\x90\x1b\xb8\x4d\x93\x03\xb8\x5e\x94\x48\x0e\xc2\xeb\xdd\x45\xab\x85\xf8\xf6\x21\x76\x11\x07\x12\x75\x62\x66\xde\xa3\xe8\x62\x70\xba\x46\x41\xab\x62\xb5\xef\x00\x80\x2d\x17\xdc\x72\xaa\x6e\xa4\xc9\xa1\x13\xe4\xa1\xd5\xeb\x5e\x0a\x65\x3e\x1d\x8a\x9f\xa9\xf2\xd0\x77\x7d\xf7\x83\x4c\xcc\xdb\x3b\x8e\x97\x33\x5a\x53\x46\xca\x8e\xd4\x62\xdc\xf3\xd7\x1d\xc4\x3c\x85\xdd\xa8\x0c\x96\x89\x5a\x74\xdc\x25\x05\xa3\xc4\x79\x09\x1b\xe0\xef\xff\xeb\xb4\xcc\xef\x69\x31\x5d\xc8\x56\xcc\xb2\x0e\xcf\x00\x00\x00\xff\xff\xf1\x42\x7f\x60\xf3\x00\x00\x00")

func _000002_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initUpSql,
		"000002_init.up.sql",
	)
}

func _000002_initUpSql() (*asset, error) {
	bytes, err := _000002_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init.up.sql", size: 243, mode: os.FileMode(438), modTime: time.Unix(1628262664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x2d\x4e\x2d\x2a\xe6\xe5\x52\x50\x50\x50\x08\x72\xf5\x73\xf4\x75\x55\x00\x89\xe4\xe4\xa7\x67\xe6\x29\x84\xf8\x83\x39\x79\x89\xb9\xa9\xd6\xbc\x5c\xbc\x5c\xc8\xda\x91\xf4\x39\xba\xb8\x28\x38\xfb\xfb\x05\x87\x04\x39\x7a\xfa\x85\x28\x38\x7b\xc7\x83\x25\xe3\x61\x7a\xe3\x73\x33\xf3\x32\x73\x4b\x73\xe3\x73\x52\xf3\x14\x9c\x3d\x5c\x9d\xbd\x15\x34\x92\x33\x12\x8b\x40\xfc\xf4\x92\x0c\x0d\x98\x3a\x4d\x3b\x5b\x33\x4d\x6b\x40\x00\x00\x00\xff\xff\x30\x6b\x9e\x23\xa4\x00\x00\x00")

func _000003_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_initUpSql,
		"000003_init.up.sql",
	)
}

func _000003_initUpSql() (*asset, error) {
	bytes, err := _000003_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_init.up.sql", size: 164, mode: os.FileMode(438), modTime: time.Unix(1629289964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xdc\x38\xd2\x7d\x96\x7e\x05\xa7\x81\x09\xa4\x0f\xfe\xda\xba\x5f\x1a\x30\xb0\x98\x24\x0b\xe4\x61\x33\xc0\x26\xf3\xb4\xb5\x08\x28\x89\x74\x84\xb5\x5b\x8e\xa4\x9e\xa9\x4e\xe0\xff\xbe\x38\x2c\xda\x69\x5f\x92\x00\x3b\x63\x40\x6e\x91\x62\x55\x9d\xba\x9d\xe2\xf9\xb9\x7a\x39\x0d\x46\x5d\x9a\xbd\x99\xf5\x6a\x06\x65\xa7\x59\xdd\xe8\xfe\x3f\xfa\xd2\xa8\xeb\xf1\x72\xd6\xeb\x38\xed\x17\xd5\x1d\xd5\xe5\xf4\xff\xdd\xb8\x1f\xf4\xaa\xd5\xab\x5f\xd5\xdb\x5f\xdf\xab\xd7\xaf\xde\xbc\xdf\xaa\xe8\x6f\xf7\xd2\x71\x78\x7e\xae\x96\xe9\x30\xf7\x66\xd9\xe1\x3d\xc1\x5f\xfa\x61\xdc\x8f\xeb\xf6\x70\xb3\x5d\x3e\x5d\xdd\xef\x66\xcf\xee\xe6\x8f\x77\xbd\xc9\xed\xe5\x84\xd5\x9d\x25\x2c\x9f\xa2\x0c\xc3\xf1\xfa\x66\x9a\x57\x15\x85\xc1\xa6\x3b\xae\x66\xd9\x84\xc1\xa6\x9f\xae\x6f\x66\xb3\x2c\xe7\x97\x9f\xc7\x1b\x6c\xd8\xeb\x15\x3f\xe3\x24\xff\xcf\xc7\xe9\xb0\x8e\x57\x58\x4c\x4e\xe0\x46\xaf\x1f\xcf\xed\x78\x65\xf0\x82\x8d\x65\x9d\xc7\xfd\xa5\xfb\xb6\x8e\xd7\x66\x13\xc6\x61\x68\x0f\xfb\xfe\x0e\xdc\x3f\x8d\x1e\x22\x17\x98\x7f\xfd\x1b\x66\xcf\xd4\x5e\x5f\x1b\x25\x62\xb1\x8a\xee\x76\xcd\x3c\x4f\x73\xac\xbe\x84\xc1\xe5\x67\xb7\x52\xbb\x0b\x05\x54\xdb\xb7\xe6\x0f\x28\x31\x73\xe4\x60\x63\xfd\xcb\xc1\x5a\x33\x3b\xb5\x71\x1c\x06\xa3\x75\x02\x3f\x5d\xa8\xfd\x78\x05\x15\xc1\x6c\xd6\xc3\xbc\xc7\xf2\x4c\xd9\xeb\x75\xfb\x1a\xda\x6d\xb4\x81\x22\xf5\xf3\xa7\x9d\xfa\xf9\xf7\x8d\x20\x71\xb6\xe2\x30\xb8\x0d\xc3\xe0\x77\x3d\xab\xee\x60\x95\xd8\x11\x23\x61\xf0\x41\xe0\x5c\xa8\x71\xda\xbe\x9c\x6e\x8e\xd1\x8b\xee\x60\xcf\xd4\xe5\xe7\x38\x0c\xfa\xab\xd7\x77\x48\xb7\x2f\xaf\xa6\xc5\x44\x71\xf8\x57\xe1\x81\x1a\xd1\xff\x0d\x45\x66\x9e\x05\xb7\xdf\xec\x0e\x76\xfb\x0b\xa0\x47\xf1\x19\x4e\x84\xb7\x61\xb8\x1e\x6f\x8c\xd2\xcb\x62\x56\x84\xfc\xd0\xaf\xd0\xe2\xfc\xf3\xf9\x08\x83\x71\x6f\x27\xa5\xa6\x65\xfb\xf7\xf1\xca\xbc\xd9\xdb\xe9\x5e\xce\xa7\xf0\x6e\xff\x44\x83\xcb\xa1\x52\x3e\x8d\x61\xb0\x8c\x9f\xdd\x7a\xdc\xaf\x55\x11\x06\xd7\xe8\x1b\x75\xaf\xf4\x1f\xd3\x60\xdc\xe6\xfb\xf1\xda\x28\x94\xc9\x16\x6f\xb0\x73\x7e\xae\xde\x42\x97\x77\x01\x95\xe5\xc2\x20\x35\x14\xd9\xf1\x31\x88\xd8\x9d\x8f\x62\x6f\x1a\x60\xee\x65\xb7\x4e\x52\xb4\xbe\x03\xa2\x53\xad\x80\xf8\x1d\xad\x38\x1f\xc5\xe2\xc0\x43\xa5\x4e\x50\x94\xc2\x91\x07\x4a\xe1\xe8\x77\x94\xe2\x7c\x14\x9f\x86\xe1\xa1\x6a\x27\xfe\x6d\xd5\xa3\x3d\xba\x68\x7d\xdf\x02\x42\x19\xc5\x5f\xc3\xfa\xc4\xc4\x49\xac\xdf\x2c\xaf\xc6\xf9\x81\x99\x3f\x3e\x9a\xf5\xa3\x99\x95\x56\xc3\x38\x9b\x7e\x9d\xe6\xe3\x77\xcc\x39\xf9\x28\x56\xdd\x34\x5d\x3d\x75\xe5\xc5\xb4\x6c\xe1\x07\x6c\xfc\x74\xa1\x92\xbb\x54\x1c\x97\x07\x26\xc7\x45\x2d\xc7\xe5\x47\xb1\x7b\x77\x5c\x24\x1f\x66\xb6\xba\x37\x5f\x6e\x4f\xec\xf9\xe2\x46\xbf\x7e\xf8\x70\xc2\xa3\xbf\xdd\xbc\xfb\x74\xa5\x2e\x7c\x69\x47\x1b\xe2\xd4\x12\x37\x1d\x71\xd2\x10\x27\xc9\xf3\x8f\xb5\xc4\x55\x41\xdc\x58\xe2\xbe\x23\xae\x0c\x71\x9f\x11\xe7\x09\x71\x9a\x10\x17\x25\xb1\xad\x89\xdb\x94\xd8\x66\xc4\x89\x25\xee\x72\xe2\xa4\x23\x2e\x1a\xe2\xb2\x25\xee\xbd\x7c\xde\x13\xeb\x9e\xb8\x36\xc4\x49\x4f\x9c\x6a\xe2\xba\x23\xee\x2b\x62\x3d\x88\xae\x3a\x21\xd6\x0d\xb1\xc9\x89\x87\x44\x74\x42\x7f\x59\x0a\x4e\x5d\xfa\x73\x0d\x71\x95\x12\xf7\x2d\x71\x9d\x13\x6b\xe0\x33\xc4\x36\x25\xee\x1a\xb1\xd9\x36\xc4\x69\x4b\x9c\x67\xc4\x83\x16\x8c\x90\x69\xb1\x07\x5c\x03\x71\x55\x12\x77\x29\x71\xd6\x09\x66\xf8\x0c\xf9\x6e\x20\x4e\x32\xe2\x3e\x25\xae\xb5\xe0\x29\x1b\x89\x07\xe4\x80\xd9\x40\x0f\x70\x17\x22\x53\x25\xc4\x75\x26\x71\x85\xed\x0c\xf1\x31\x82\xc1\x64\x82\xc3\x1a\xe2\x0c\xdf\x11\x07\x60\x31\xc4\x9d\x25\xd6\x95\xe8\x71\xdf\x06\xe2\x0e\x98\x1b\xf9\xd6\x7a\x9f\x11\xcb\xa1\xf7\x31\xe8\x24\x86\xad\xf5\xb1\xce\x89\x1b\xef\xf7\x00\x99\x8e\xd8\xe2\x49\x88\x4d\xe2\x31\x55\xc4\x43\x27\xb1\x6b\x72\xc1\x06\x0c\xa8\x01\xc4\x05\x71\xee\x1b\xe2\xbc\x96\xdc\x36\x46\x62\x35\xe4\xc4\x36\x27\x36\x35\xf1\x50\x13\xe7\xf0\x29\x23\x6e\x52\xb1\x03\xdf\xe0\x4f\x0a\x0c\x95\xf8\x6e\x2c\xb1\x69\x44\x0e\x36\x80\x11\xb2\xb5\xb7\x6b\x60\xb7\x90\x18\x26\x9a\xb8\xa8\x89\x3b\xe3\xeb\xab\x27\x2e\x80\xb9\x93\x3a\x73\xb9\x6c\x89\x4b\xaf\x1f\xd8\xa0\xd7\x16\xc4\x3a\x93\x9a\x6a\x4f\xfc\xeb\x51\x7f\x25\x71\x5f\x13\x37\xa5\x60\x41\xbe\xca\x41\xd6\x75\x21\x36\xcb\x94\xb8\x2c\x88\xf3\x52\x7e\xb3\x5e\xf2\x5e\x26\xc4\x03\xf2\x02\x7d\x3e\xcf\xa5\x91\x98\x17\x83\xe4\x07\x39\x71\x67\x4b\xf1\xd3\xf9\xd2\x11\xb7\x5a\x70\xb4\x85\xd4\x2e\x7a\xa5\xab\x89\xab\x4a\x6a\xbb\xf1\x78\x4d\x4f\xdc\xf4\xc4\x15\x72\x5d\x10\xd7\x15\x71\xaf\xe5\x6c\x81\x7e\x68\x25\xbe\x49\x21\x7b\xc8\x17\xf4\x0d\xa5\xc4\x09\x75\x64\x4a\xa9\x7f\x60\x69\x6a\xc1\x88\x1a\x07\xfe\x22\x93\x98\x25\x46\xbe\x23\x87\xc0\x8b\xfe\x68\x3c\x3e\xe0\x19\x32\xe9\x43\xeb\x7b\xd0\xd5\x40\x45\x5c\x69\x62\x0d\x2c\xad\xd4\x4b\xd6\x4a\xaf\xe4\x3e\xee\x95\xaf\x43\xe4\x0b\xf8\x11\x4b\xd8\x44\x2c\x80\xbf\x83\x7c\x4a\x6c\xa0\x53\xcb\x5e\x59\x49\x8c\xa0\x3b\x47\xdd\xa6\x0f\x79\xc6\x3d\x85\xc4\xb0\x40\xaf\xfa\x1a\xfa\x7a\x6e\x73\x77\x81\x7a\x42\x6c\x7e\xb6\x3f\x77\x67\xba\xbb\x01\x9c\xdc\xb9\xc2\x20\x78\xca\x8d\x67\x61\x10\x6c\x9e\x5e\x3c\x37\x67\x61\x10\x83\x51\x9f\x37\x0c\x9b\xff\xe7\x2e\x11\xa7\x36\xdd\x2d\xe2\xfe\xaa\xf6\x2d\xb4\x3f\xba\x0d\xdd\x5f\x62\xdc\x35\x64\x77\xf1\x78\x10\x7c\xc1\x4c\xdf\xa9\x67\x41\xbb\x99\xbe\x53\x45\xd3\x9c\xb9\x69\xb2\x3b\x9d\xb4\x51\x91\x37\xb1\xdb\xc7\xfc\xdb\xc9\x7c\xfc\x6d\x3f\x72\x94\x56\x59\x9b\x25\x69\x9d\xe5\x67\x2a\x89\x6f\xc3\x40\xc3\xee\x0b\xe7\xe0\x17\xe7\xd5\x4e\x79\xe7\x00\x6a\xe7\xfe\xdf\xde\x07\x59\x9f\x3d\x33\x7f\xb2\x3f\x39\x7f\xd0\xaf\xcd\x40\x9c\xa7\xc4\x5a\x4b\x7f\x83\x1f\xc0\x7f\xe0\x4c\xcc\x10\xf4\x07\xfa\x1c\x7c\x81\xbe\x80\x5c\xeb\x39\x04\xdc\xec\xfa\x16\xbc\x90\xcb\xda\xf5\x4a\x21\x33\x2a\xf1\x33\x0d\xb5\x39\xf8\x39\xa4\x3b\xe1\x0a\xdb\x48\x6f\x64\xa9\xf4\x68\x8a\x5a\xac\x85\xff\x6a\xd4\x7f\x26\xbd\x0d\xbe\xd0\xb9\xd4\x2b\xf6\xd0\x5b\x9d\xaf\x7b\xd4\x32\xf4\x61\xbf\xf3\x7c\x04\xdf\x9a\x84\x38\x1b\x88\xd3\x5a\x78\x1d\xb3\x03\xfe\xa1\xa7\x74\x21\xbd\x8d\x1e\x02\xaf\x9a\x42\xde\xd1\xff\xc0\x09\xfc\xe0\x30\xd7\x93\xe0\x63\x70\x9b\x16\x1e\x04\x77\x38\xae\xc0\x3c\x02\xe7\xfa\xbe\x76\x9c\xdf\x0b\xbf\x82\x27\xf3\xce\x73\x7c\x2d\x7d\x5d\x6a\xe1\xd8\xc2\x73\x11\xbe\x0d\x85\xe0\x06\x3e\x70\x2e\x38\x1c\xb6\xc0\xc9\x98\xe7\x88\x11\x62\x86\x99\xed\xe6\x51\x45\xdc\xb4\xa2\x0b\x79\x83\x5c\x56\x0a\x1f\x23\x3e\x90\xab\xc1\x4b\xad\xe4\x06\xb3\xc9\xf8\xde\x87\x5f\xe0\x12\xe0\xc3\x5e\xd5\x4a\xce\xc1\xdb\x98\x4b\xe0\x0f\x7c\xc3\x6c\x74\x39\xb3\x4f\x6b\xc5\x3d\x9e\x8b\x6a\x2b\x33\x19\xb8\xbf\x9e\x7b\xc4\x21\xd9\x9f\xe7\x90\xec\x39\x0e\xc9\x7e\xc4\x21\xd9\xff\xc2\x21\x4f\xd1\xfe\xa5\x1c\x92\x3d\xcb\x21\x59\x91\x3f\xe6\x90\xff\x06\x00\x00\xff\xff\x31\x6d\x7c\x9e\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(438), modTime: time.Unix(1629290036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x31\x0a\xc5\x20\x10\x04\xd0\x5e\xf0\x0e\x73\x01\xb5\xff\xb7\x99\x9f\x2c\x83\x48\x5c\x31\x7b\x7f\xd2\xa4\x48\xfd\xde\xe2\x31\x28\xc3\xd5\xb5\x19\xdd\xe7\x9d\x53\x4e\xad\xc9\x7f\xb2\x69\x9b\x61\x90\x97\x7f\x9f\x27\x83\x28\x6b\xe8\x73\x51\x1c\x2f\x55\x39\x50\x73\x7a\x02\x00\x00\xff\xff\x98\x70\xac\x16\x51\x00\x00\x00")

func generateGoBytes() ([]byte, error) {
	return bindataRead(
		_generateGo,
		"generate.go",
	)
}

func generateGo() (*asset, error) {
	bytes, err := generateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generate.go", size: 81, mode: os.FileMode(438), modTime: time.Unix(1628252845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.up.sql": _000001_initUpSql,
	"000002_init.up.sql": _000002_initUpSql,
	"000003_init.up.sql": _000003_initUpSql,
	"bindata.go":         bindataGo,
	"generate.go":        generateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.up.sql": &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_init.up.sql": &bintree{_000002_initUpSql, map[string]*bintree{}},
	"000003_init.up.sql": &bintree{_000003_initUpSql, map[string]*bintree{}},
	"bindata.go":         &bintree{bindataGo, map[string]*bintree{}},
	"generate.go":        &bintree{generateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
